// Auto generated by cbindgen 0.29.0

#ifndef NOGAMEPADS_DATA_H
#define NOGAMEPADS_DATA_H

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum FfiConnectionMessageTag {
  ConnectionJoin,
  ConnectionRequestGameInfos,
  ConnectionRequestLayoutConfigure,
  ConnectionRequestSkinPackage,
  ConnectionReady,
  ConnectionError,
} FfiConnectionMessageTag;

typedef enum FfiConnectionResponseMessageTag {
  GameInfosResponse,
  DenyResponse,
  FailResponse,
  OkResponse,
  WelcomeResponse,
  ErrorResponse,
} FfiConnectionResponseMessageTag;

typedef enum FfiControlMessageTag {
  CtrlMsg,
  CtrlPressed,
  CtrlReleased,
  CtrlAxis,
  CtrlDir,
  CtrlExit,
  CtrlError,
  CtrlEnd,
} FfiControlMessageTag;

typedef enum FfiExitReason {
  ExitReason,
  GameOverReason,
  ServerClosedReason,
  YouAreKickedReason,
  YouAreBannedReason,
  ErrorReason,
} FfiExitReason;

typedef enum FfiGameMessageTag {
  GameEventTrigger,
  GameMsg,
  GameLetExit,
  GameError,
  GameEnd,
} FfiGameMessageTag;

typedef enum FfiJoinFailedMessage {
  ContainIdenticalPlayer,
  PlayerBanned,
  GameLocked,
  UnknownError,
} FfiJoinFailedMessage;

typedef struct FfiAccount {
  char *id;
  char *player_hash;
} FfiAccount;

typedef struct FfiCustomize {
  char *nickname;
  int color_hue;
  double color_saturation;
  double color_value;
} FfiCustomize;

typedef struct FfiPlayer {
  struct FfiAccount account;
  struct FfiCustomize *customize;
} FfiPlayer;

typedef struct FfiKeyAndAxis {
  uint8_t key;
  double axis;
} FfiKeyAndAxis;

typedef struct FfiKeyAndDirection {
  uint8_t key;
  double x;
  double y;
} FfiKeyAndDirection;

typedef union FfiControlMessageUnion {
  char *message;
  uint8_t key;
  struct FfiKeyAndAxis key_and_axis;
  struct FfiKeyAndDirection key_and_direction;
} FfiControlMessageUnion;

typedef struct FfiControlMessage {
  enum FfiControlMessageTag tag;
  union FfiControlMessageUnion data;
} FfiControlMessage;

typedef union FfiGameMessageUnion {
  uint8_t key;
  char *message;
  enum FfiExitReason exit_reason;
} FfiGameMessageUnion;

typedef struct FfiGameMessage {
  enum FfiGameMessageTag tag;
  union FfiGameMessageUnion data;
} FfiGameMessage;

typedef union FfiConnectionMessageUnion {
  struct FfiPlayer player;
} FfiConnectionMessageUnion;

typedef struct FfiConnectionMessage {
  enum FfiConnectionMessageTag tag;
  union FfiConnectionMessageUnion data;
} FfiConnectionMessage;

typedef struct KeyValuePair {
  char *key;
  char *value;
} KeyValuePair;

typedef struct FfiGameInfo {
  struct KeyValuePair *data;
  uintptr_t len;
  uintptr_t cap;
} FfiGameInfo;

typedef union FfiConnectionResponseMessageUnion {
  struct FfiGameInfo game_info;
  enum FfiJoinFailedMessage failed_message;
} FfiConnectionResponseMessageUnion;

typedef struct FfiConnectionResponseMessage {
  enum FfiConnectionResponseMessageTag tag;
  union FfiConnectionResponseMessageUnion data;
} FfiConnectionResponseMessage;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

void free_c_string(char *ptr);

struct FfiPlayer *player_register(const char *id, const char *password);

bool player_check(const struct FfiPlayer *player, const char *password);

void player_set_nickname(struct FfiPlayer *player, const char *nickname);

void player_set_hue(struct FfiPlayer *player, int hue);

void player_set_hsv(struct FfiPlayer *player, int hue, double saturation, double value);

void player_free(struct FfiPlayer *player);

void free_control_message(struct FfiControlMessage msg);

void free_game_message(struct FfiGameMessage msg);

void free_exit_reason(enum FfiExitReason msg);

void free_connection_message(struct FfiConnectionMessage msg);

void free_connection_response_message(struct FfiConnectionResponseMessage msg);

void free_join_failed_message(enum FfiJoinFailedMessage msg);

void free_game_info(struct FfiGameInfo map);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* NOGAMEPADS_DATA_H */
